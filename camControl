#! /bin/sh
# If using on Android, replace "/bin/sh" with "/system/bin/sh"

# This function checks whether the camera is on the network and reachable. It
# takes two arguments: first a log file, then the ip of the camera.
function checkConnectiviy()
{
  if [[ $# != 2 ]]
  then
    echo "\a\aUsage error in $FUNCNAME(): number of parameters is wrong.\n"
    exit
  fi

  logFile=$1
  addy=$2
  # Check to see if camera is up and reachable, -T20 gives wget 20 seconds to
  # test for connectivity, -t1 tells it to only try once.
  wget -q -T20 -t1 -O - $addy > /dev/null 2>&1

  # Get return code.
  code=$?

  if [ $code != 0 ]
  then
    echo "\a\a"
    if [ $code = "4" ]
    then
      log $logFile "\nConnection timeout [code:$code], skipping $2...\n" 1
      return $code
    else
      log $logFile "\nUnhandled wget error [code:$code], skipping $2...\n" 1
      return $code
    fi
  fi

  return $code
}

#
# This function will write its message to a log file and, optionally to the
# screen as well. It takes two or three arguments: first a log file, second the
# message string, third [optionally] 1 to echo message to stdout, 0 to not echo
# message to stdout. If the third argument is not given, nothing is echo'd to
# stdout.
#
function log()
{
  if [[ $# != 2 && $# != 3 ]]
  then
    echo "\a\aUsage error in $FUNCNAME(): number of parameters is wrong.\n"
    exit
  fi

  logFile=$1
  [ -f $logFile ] || echo "Log file does not exist, creating file <$logFile>"

  message=$2

  if [ $# != 3 ]
  then
    toScreen=0
  else
    toScreen=$3
  fi

  if [ $toScreen == 1 ]
  then
    echo $message
  fi

  echo $message >> $logFile
}

[ -z "$1" ] && exec $0 h

# Save off command line parameters to facilitate iteration over multiple
# cameras.
clps=$@

# Get basename of script.
prog=$0
basename=${prog/#\.\//}

######## Set these options! ########
####################################
logFile="/Users/ehereth/camControl.log"

log $logFile "\n$basename started at `date`" 0
log $logFile "[$0 $clps]" 0

# Check for help message and determine if the alarm is being armed; if it is,
# sleep for 30 seconds otherwise, do not.
arg=$#
while [ "$arg" -ne "0" ]; do

  case "$1" in

    alarm)
      if [ $2 != off ] && [ $2 != on ]
      then
        log $logFile "ERROR: bad parameter to $1 ($2)" 1
        exit
      fi

      # Record if alarm is being armed or disarmed.
      [ $2 = off ] && arm=0
      [ $2 = on ] && arm=1
      break;;

    # Print help message and exit.
    h|-h|help|--help)
      echo "sleep|wait|pause|p|s|w   : requires argument will pause script for X seconds.
      setup                          : dumps camera setup (as much as 200 lines)
      gsetup                         : dumps setup but allows you to grep it for keyword. usage: cam gsetup (string)
      led                            : requires argument 0-2. 2 is off, 0/1 on or flashing
      snap                           : save snapshot to /sdcard/cam.jpg
      speed                          : the speed the camera moves. 0-?, 0 is fastest, normal is 2-3
      ir                             : turns IR on or off, must specify on or off
      up/down/left/right/stop/center : starts movement, must use separate stop command to stop movement
      contrast (0-6)                 : must specify number
      bright (0-16)                  : must specify number 0-16
      vert/horiz                     : start vert or horiz patrol
      50/60/out                      : set 50hz, 60hz outdoor mode
      flip/mirror                    : flip or mirror the image
      alarm                          : specify on or off
      mail                           : specify on or off to send email on motion detect
      mdc                            : specify on or off, specifies motion detection compensation
      interval                       : image upload interval in seconds, 0 for off, 1 to 65535 for on
      sense                          : motion sensitivity 0-10, 0 being most sensitive
      reboot                         : reboots cam
      set (1-16)                     : set preset
      go (1-16)                      : go to preset"

      log $logFile "$basename completed at `date`" 1
      exit;;

    *)
      shift; arg=$(($arg - 1));;

  esac
done

set -- $clps # Reset command line parameters.

# Camera address or ip, with or without port.
# e.g., xxx.xx.xx.xxx:80
ip[0]="10.0.1.10:8001"
ip[1]="10.0.1.11:8002"
ip[2]="10.0.1.12:8003"
ip[3]="10.0.1.13:8004"

# Camera username.
user="ehereth"

# Camera password.
pass=""
read -s -p "Please enter password, then hit enter.  " pass

if [ -z "$pass" ]
then
  echo "\a\n\nYou must enter a password, exiting...\n"
  exit
fi

# This simply verifies the input password for validity by trying to toggle the
# led on the camera; wget will return 0 if username/password combination valid,
# 6 if it is not.
addy="http://${user}:${pass}@${ip[0]}"
wget -q -T20 -O - "${addy}/set_misc.cgi?led_mode=0" # Turn led on...

code=$?

if [ $code != 0 ]
then
  echo "\a\a"
  if [ $code = 6 ]
  then
    log $logFile "\nPassword incorrect [code: $code] exiting...\n" 1
    exit
  fi
else
  wget -q -O - "${addy}/set_misc.cgi?led_mode=2" #turn led off...
  log $logFile "Password validated\n" 1
fi

# Location to save snapshot.
snapfile=""
####################################
####################################

# Sleep for a while to allow the user to exit premises.
# Only sleep if arming system.
if [ $arm = 1 ]
then
  sleep 30
fi

for cam in "${ip[@]}"
do
  checkConnectiviy $logFile $cam

  # Skip this camera if connectivity fails.
  if [ $? != 0 ]
  then
    continue
  fi

  addy="http://${user}:${pass}@${cam}"
  log $logFile "\nlogging into $cam\n" 1

  arg=$#
  while [ "$arg" -ne "0" ]; do

    case "$1" in

      50)
        log $logFile "$1; [wget -q -O - ${cam}/camera_control.cgi?param=3&value=0]" 0
        wget -q -O - "${addy}/camera_control.cgi?param=3&value=0"
        shift; arg=$(($arg - 1));;

      60)
        log $logFile "$1; [wget -q -O - ${cam}/camera_control.cgi?param=3&value=1]" 0
        wget -q -O - "${addy}/camera_control.cgi?param=3&value=1"
        shift; arg=$(($arg - 1));;

      alarm)
        #if [[ $2 != off && $2 != on ]]
        if [ $2 != off ] && [ $2 != on ]
        then
          log $logFile "ERROR: bad parameter to $1 ($2)" 1
          shift; shift; arg=$(($arg - 2));
          continue
        fi

        [ $2 = off ] && cmd="set_alarm.cgi?motion_armed=0"
        [ $2 = on ] && cmd="set_alarm.cgi?motion_armed=1"
        log $logFile "$1:$2; [wget -q -O - ${cam}/$cmd]" 1
        wget -q -O - "${addy}/$cmd"

        ret=$?
        if [ $ret != 0 ]
        then
          log $logFile "ERROR: wget failed. [code $ret]" 1
        fi
        #[ $2 = off ] && wget -q -O - "${addy}/set_alarm.cgi?motion_armed=0"
        #[ $2 = on ] && wget -q -O - "${addy}/set_alarm.cgi?motion_armed=1"
        shift; shift; arg=$(($arg - 2));;

      bright)
        [ $2 = 1 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=16"
        [ $2 = 2 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=32"
        [ $2 = 3 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=48"
        [ $2 = 4 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=64"
        [ $2 = 5 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=80"
        [ $2 = 6 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=96"
        [ $2 = 7 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=112"
        [ $2 = 8 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=128"
        [ $2 = 9 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=144"
        [ $2 = 10 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=160"
        [ $2 = 11 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=176"
        [ $2 = 12 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=192"
        [ $2 = 13 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=208"
        [ $2 = 14 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=224"
        [ $2 = 15 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=240"
        [ $2 = 16 ] && wget -q -O - "${addy}/camera_control.cgi?param=1&value=255"
        shift; shift; arg=$(($arg - 2));;

      center)
        wget -q -O - "${addy}/decoder_control.cgi?command=25"
        shift; arg=$(($arg - 1));;

      contrast)
        wget -q -O - "${addy}/camera_control.cgi?param=2&value=$2"
        shift; shift; arg=$(($arg - 2));;

      down)
        wget -q -O - "${addy}/decoder_control.cgi?command=2"
        shift; arg=$(($arg - 1));;

      flip)
        wget -q -O - "${addy}/camera_control.cgi?param=5&value=1"
        shift; arg=$(($arg - 1));;

      go)
        [ $2 = 1 ] && wget -q -O - "${addy}/decoder_control.cgi?command=31"
        [ $2 = 2 ] && wget -q -O - "${addy}/decoder_control.cgi?command=33"
        [ $2 = 3 ] && wget -q -O - "${addy}/decoder_control.cgi?command=35"
        [ $2 = 4 ] && wget -q -O - "${addy}/decoder_control.cgi?command=37"
        [ $2 = 5 ] && wget -q -O - "${addy}/decoder_control.cgi?command=39"
        [ $2 = 6 ] && wget -q -O - "${addy}/decoder_control.cgi?command=41"
        [ $2 = 7 ] && wget -q -O - "${addy}/decoder_control.cgi?command=43"
        [ $2 = 8 ] && wget -q -O - "${addy}/decoder_control.cgi?command=45"
        [ $2 = 9 ] && wget -q -O - "${addy}/decoder_control.cgi?command=47"
        [ $2 = 10 ] && wget -q -O - "${addy}/decoder_control.cgi?command=49"
        [ $2 = 11 ] && wget -q -O - "${addy}/decoder_control.cgi?command=51"
        [ $2 = 12 ] && wget -q -O - "${addy}/decoder_control.cgi?command=53"
        [ $2 = 13 ] && wget -q -O - "${addy}/decoder_control.cgi?command=55"
        [ $2 = 14 ] && wget -q -O - "${addy}/decoder_control.cgi?command=57"
        [ $2 = 15 ] && wget -q -O - "${addy}/decoder_control.cgi?command=59"
        [ $2 = 16 ] && wget -q -O - "${addy}/decoder_control.cgi?command=61"
        shift; shift; arg=$(($arg - 2));;

      horiz)
        wget -q -O - "${addy}/decoder_control.cgi?command=28"
        shift; arg=$(($arg - 1));;

      interval)
        cmd="set_alarm.cgi?upload_interval=${2}"
        log $logFile "$1:$2; [wget -q -O - ${cam}/$cmd]" 1
        wget -q -O - "${addy}/$cmd"

        ret=$?
        if [ $ret != 0 ]
        then
          log $logFile "ERROR: wget failed. [code $ret]" 1
        fi

        #wget -q -O - "${addy}/set_alarm.cgi?upload_interval=${2}"
        shift; shift; arg=$(($arg - 2));;

      ir)
        [ $2 = on ] && wget -q -O - "${addy}/decoder_control.cgi?command=95"
        [ $2 = off ] && wget -q -O - "${addy}/decoder_control.cgi?command=94"
        shift; shift; arg=$(($arg - 2));;

      led)
        cmd="set_misc.cgi?led_mode=$2"
        log $logFile "$1:$2; wget -q -O - ${cam}/${cmd}" 0
        wget -q -O - "${addy}/${cmd}"
        shift; shift; arg=$(($arg - 2));;

      left)
        wget -q -O - "${addy}/decoder_control.cgi?command=6"
        shift; arg=$(($arg - 1));;

      mail)
        if [ $2 != off ] && [ $2 != on ]
        then
          log $logFile "ERROR: bad parameter to $1 ($2)" 1
          shift; shift; arg=$(($arg - 2));
          continue
        fi

        [ $2 = off ] && cmd="set_alarm.cgi?mail=0"
        [ $2 = on ] && cmd="set_alarm.cgi?mail=1"
        log $logFile "$1:$2; wget -q -O - ${cam}/${cmd}" 1
        wget -q -O - "${addy}/${cmd}"
        #[ $2 = off ] && wget -q -O - "${addy}/set_alarm.cgi?mail=0"
        #[ $2 = on ] && wget -q -O - "${addy}/set_alarm.cgi?mail=1"

        ret=$?
        if [ $ret != 0 ]
        then
          log $logFile "ERROR: wget failed. [code $ret]" 1
        fi

        shift; shift; arg=$(($arg - 2));;

      mirror)
        wget -q -O - "${addy}/camera_control.cgi?param=5&value=2"
        shift; arg=$(($arg - 1));;

      out)
        wget -q -O - "${addy}/camera_control.cgi?param=3&value=2"
        shift; arg=$(($arg - 1));;

      reboot)
        log $logFile "REBOOTING $cam; [wget -q -O - ${cam}/reboot.cgi]" 1
        wget -q -O - "${addy}/reboot.cgi"
        shift; arg=$(($arg - 1));;

      right)
        wget -q -O - "${addy}/decoder_control.cgi?command=4"
        shift; arg=$(($arg - 1));;

      sense)
        cmd="set_alarm.cgi?motion_sensitivity=${2}"
        log $logFile "$1:$2; wget -q -O - ${cam}/set_alarm.cgi?motion_sensitivity=${2}" 1
        wget -q -O - "${addy}/${cmd}"

        ret=$?
        if [ $ret != 0 ]
        then
          log $logFile "ERROR: wget failed. [code $ret]" 1
        fi

        shift; shift; arg=$(($arg - 2));;

      mdc)
        if [ $2 != off ] && [ $2 != on ]
        then
          log $logFile "ERORR: bad parameter to $1 ($2)" 1
          shift; shift; arg=$(($arg - 2));
          continue
        fi

        [ $2 = off ] && cmd="set_alarm.cgi?motion_compensation=0"
        [ $2 = on ] && cmd="set_alarm.cgi?motion_compensation=1"
        log $logFile "$1:$2; [wget -q -O - ${cam}/$cmd]" 1
        wget -q -O - "${addy}/$cmd"
        #wget -q -O - "${addy}/set_alarm.cgi?motion_compensation=${2}"

        ret=$?
        if [ $ret != 0 ]
        then
          log $logFile "ERROR: wget failed. [code $ret]" 1
        fi

        shift; shift; arg=$(($arg - 2));;

      set)
        # Sets camera presets 1-16.
        [ $2 = 1 ] && wget -q -O - "${addy}/decoder_control.cgi?command=30"
        [ $2 = 2 ] && wget -q -O - "${addy}/decoder_control.cgi?command=32"
        [ $2 = 3 ] && wget -q -O - "${addy}/decoder_control.cgi?command=34"
        [ $2 = 4 ] && wget -q -O - "${addy}/decoder_control.cgi?command=36"
        [ $2 = 5 ] && wget -q -O - "${addy}/decoder_control.cgi?command=38"
        [ $2 = 6 ] && wget -q -O - "${addy}/decoder_control.cgi?command=40"
        [ $2 = 7 ] && wget -q -O - "${addy}/decoder_control.cgi?command=42"
        [ $2 = 8 ] && wget -q -O - "${addy}/decoder_control.cgi?command=44"
        [ $2 = 9 ] && wget -q -O - "${addy}/decoder_control.cgi?command=46"
        [ $2 = 10 ] && wget -q -O - "${addy}/decoder_control.cgi?command=48"
        [ $2 = 11 ] && wget -q -O - "${addy}/decoder_control.cgi?command=50"
        [ $2 = 12 ] && wget -q -O - "${addy}/decoder_control.cgi?command=52"
        [ $2 = 13 ] && wget -q -O - "${addy}/decoder_control.cgi?command=54"
        [ $2 = 14 ] && wget -q -O - "${addy}/decoder_control.cgi?command=56"
        [ $2 = 15 ] && wget -q -O - "${addy}/decoder_control.cgi?command=58"
        [ $2 = 16 ] && wget -q -O - "${addy}/decoder_control.cgi?command=60"
        shift; shift; arg=$(($arg - 2));;

      setup)
        wget -q -O - "${addy}/get_params.cgi"
        wget -q -O - "${addy}/get_status.cgi"
        wget -q -O - "${addy}/get_misc.cgi"
        shift; arg=$(($arg - 1));;

      gsetup)
        wget -q -O - "${addy}/get_params.cgi" | grep -i "$2"
        wget -q -O - "${addy}/get_status.cgi" | grep -i "$2"
        wget -q -O - "${addy}/get_misc.cgi" | grep -i "$2"
        shift; shift; arg=$(($arg - 2));;

      sleep|wait|pause|p|s|w)
        sleep $2
        shift; shift; arg=$(($arg - 2));;

      snap)
        wget -q -O ${snapfile} "${addy}/snapshot.cgi?"
        shift; arg=$(($arg - 1));;

      speed)
        wget -q -O - "${addy}/set_misc.cgi?ptz_patrol_rate=$2"
        shift; shift; arg=$(($arg - 2));;

      stop)
        wget -q -O - "${addy}/decoder_control.cgi?command=3"
        shift; arg=$(($arg - 1));;

      up)
        wget -q -O - "${addy}/decoder_control.cgi?command=0"
        shift; arg=$(($arg - 1));;

      vert)
        wget -q -O - "${addy}/decoder_control.cgi?command=26"
        shift; arg=$(($arg - 1));;

      *)
        log $logFile "Unhandled parameter $1" 1
        shift; arg=$(($arg - 1));;

    esac
  done

  set -- $clps # Reset command line parameters.

done

log $logFile "$basename completed at `date`" 1
